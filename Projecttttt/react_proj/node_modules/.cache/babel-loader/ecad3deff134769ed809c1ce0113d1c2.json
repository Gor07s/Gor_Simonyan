{"ast":null,"code":"var _jsxFileName = \"/home/gor/Project/Email_tamplate/react_proj/src/Components/useTemplate.js\";\nimport React, { Component } from \"react\";\nimport { slide as Menu } from 'react-burger-menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UseTemplate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: \"\",\n      myTempIsClick: false,\n      text: \"\"\n    };\n    this.words = [];\n    this.myTemplates = this.myTemplates.bind(this);\n    this.showMyTemps = this.showMyTemps.bind(this);\n    this.templateOnClick = this.templateOnClick.bind(this);\n  }\n\n  templateOnClick(id) {\n    this.words.filter(template => {\n      if (template.id == id) {\n        this.text = template.templateText;\n      }\n    });\n  }\n\n  async myTemplates() {\n    const div = document.getElementById(\"useTemplatesMenu\");\n    const myTemps = document.getElementById(\"myTemps\");\n    await fetch(\"/useTemplate\", {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.text()).then(res => this.setState({\n      apiResponse: res\n    }));\n    let templates = this.state.apiResponse.substring(1, this.state.apiResponse.length - 1).split('},');\n\n    if (templates[0] === \"\") {\n      return;\n    }\n\n    templates.forEach((template, index) => {\n      if (index !== templates.length - 1) {\n        templates[index] += \"}\";\n      }\n    });\n    this.words = [];\n    console.log(templates);\n\n    for (let i = 0; i < templates.length; i++) {\n      let a = JSON.parse(templates[i]);\n      this.words.push(a);\n    }\n\n    this.words.forEach((template, index) => {\n      const ep = document.getElementById(index + 1);\n      console.log(ep);\n\n      if (ep === null) {\n        const p = document.createElement(\"p\");\n        p.id = index + 1;\n        p.innerHTML = template.templateName;\n\n        p.onclick = () => this.templateOnClick(p.id);\n\n        div.appendChild(p);\n        div.insertBefore(p, myTemps);\n      }\n    });\n  }\n\n  showMyTemps() {\n    this.myTemplates();\n\n    for (let i = 1; i <= this.words.length; i++) {\n      const p = document.getElementById(i);\n\n      if (this.state.myTempIsClick) {\n        p.style.display = \"none\";\n      } else {\n        p.style.display = \"block\";\n      }\n    }\n\n    this.state.myTempIsClick = !this.state.myTempIsClick;\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // <Menu width={'150px'} >\n      //     <p id={\"defaultTemplates\"} className={\"templateMenu\"}>Default Templates</p>\n      //     <p id={\"myTemplates\"} className={\"templateMenu\"}>My Templates</p>\n      // </Menu>\n      _jsxDEV(\"div\", {\n        id: \"useTempsGeneral\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"useTemplatesMenu\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"defTemps\",\n            children: \"Default Templates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"myTemps\",\n            onClick: this.showMyTemps,\n            children: \"My Templates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"example\",\n          children: this.state.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}\n\nexport default UseTemplate;","map":{"version":3,"sources":["/home/gor/Project/Email_tamplate/react_proj/src/Components/useTemplate.js"],"names":["React","Component","slide","Menu","UseTemplate","constructor","props","state","apiResponse","myTempIsClick","text","words","myTemplates","bind","showMyTemps","templateOnClick","id","filter","template","templateText","div","document","getElementById","myTemps","fetch","method","headers","then","res","setState","templates","substring","length","split","forEach","index","console","log","i","a","JSON","parse","push","ep","p","createElement","innerHTML","templateName","onclick","appendChild","insertBefore","style","display","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { slide as Menu } from 'react-burger-menu'\n\nclass UseTemplate extends Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            apiResponse:\"\",\n            myTempIsClick: false,\n            text: \"\"\n        }\n        this.words = []\n        this.myTemplates = this.myTemplates.bind(this)\n        this.showMyTemps = this.showMyTemps.bind(this)\n        this.templateOnClick = this.templateOnClick.bind(this)\n\n        }\n\n    templateOnClick(id){\n        this.words.filter(template => {\n            if(template.id == id){\n                this.text = template.templateText\n            }\n        })\n    }\n\n    async myTemplates(){\n        const div = document.getElementById(\"useTemplatesMenu\")\n        const myTemps = document.getElementById(\"myTemps\")\n        await fetch(\"/useTemplate\", {\n            method:'GET',\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(res => res.text())\n            .then(res => this.setState({apiResponse: res}))\n        let templates = (this.state.apiResponse).substring(1,this.state.apiResponse.length-1).split('},')\n        if(templates[0] === \"\"){\n            return\n        }\n        templates.forEach((template, index) => {\n            if (index !== templates.length-1){\n                templates[index] += \"}\"\n            }\n        })\n        this.words = []\n        console.log(templates)\n        for(let i = 0; i < templates.length; i++) {\n            let a = JSON.parse(templates[i])\n            this.words.push(a)\n        }\n        this.words.forEach((template, index) => {\n            const ep = document.getElementById(index+1)\n            console.log(ep)\n            if(ep === null) {\n                const p = document.createElement(\"p\")\n                p.id = index + 1\n                p.innerHTML = template.templateName\n                p.onclick = () => this.templateOnClick(p.id)\n                div.appendChild(p)\n                div.insertBefore(p, myTemps)\n            }\n        })\n    }\n\n    showMyTemps(){\n        this.myTemplates()\n        for(let i = 1; i <= this.words.length; i++){\n            const p = document.getElementById(i)\n            if(this.state.myTempIsClick){\n                p.style.display = \"none\"\n            }\n            else {\n                p.style.display = \"block\"\n            }\n        }\n        this.state.myTempIsClick = !this.state.myTempIsClick\n    }\n\n    render() {\n        return (\n            // <Menu width={'150px'} >\n            //     <p id={\"defaultTemplates\"} className={\"templateMenu\"}>Default Templates</p>\n            //     <p id={\"myTemplates\"} className={\"templateMenu\"}>My Templates</p>\n            // </Menu>\n            <div id={\"useTempsGeneral\"}>\n                <span id={\"useTemplatesMenu\"}>\n                    <p id={\"defTemps\"}>Default Templates</p>\n                    <p id={\"myTemps\"} onClick={this.showMyTemps}>My Templates</p>\n                </span>\n                <p id={\"example\"}>{this.state.text}</p>\n            </div>\n        )\n    }\n}\n\nexport default UseTemplate"]},"metadata":{},"sourceType":"module"}